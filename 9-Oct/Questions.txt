1) What is Pylint. Use it and check the score for the scripts you have written.
Pylint is a static code analysis tool for the Python programming language designed to check for errors, enforce coding standards, and identify code smells without executing the code
It follows the style guide recommended by PEP 8 and can detect issues ranging from syntax errors and logical flaws to unused imports and potential runtime problems.
Pylint offers features such as checking line length, validating variable names, ensuring declared interfaces are implemented, and providing refactoring suggestions.
It can be used as a standalone program or integrated into popular IDEs and editors like Visual Studio Code, Eclipse with PyDev, Spyder, Atom, GNU Emacs, and Vim.

Scores for the scripts written:
1. logging.py               -     0.52/10
2. isbalanced_func.py       -     7.50/10
3. nested_list.py           -     3.75/10
4. arbitrary_func.py        -     2.00/10
5. count_dict.py            -     7.14/10
6. greet_func.py            -     3.33/10
7. invert_dict.py           -     3.33/10
8. nothing_func.py          -     0.00/10
9. square_dict.py           -     0.00/10

2) What is PEP8 guide. Understand and List 5 of its rules.
PEP 8 is the official style guide for Python code, providing guidelines to enhance code readability and consistency across the Python community.
With the primary goal of making code more readable, as it is read far more often than it is written.
he guide is actively maintained and serves as a foundational document for the Python standard library.

Rule 1: Indentation
Use 4 spaces per indentation level.
Continuation lines should align wrapped elements either vertically using Pythonâ€™s implicit line joining inside parentheses, brackets and braces, or using a hanging indent.
When using a hanging indent the following should be considered; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line:
The closing brace/bracket/parenthesis on multiline constructs may either line up under the first non-whitespace character of the last line of list, as in:
my_list = [
    1, 2, 3,
    4, 5, 6,
    ]

Rule 2: Maximum Length
Limit all lines to a maximum of 79 characters.
Limiting the required editor window width makes it possible to have several files open side by side, and works well when using code review tools that present the two versions in adjacent columns.
Some teams strongly prefer a longer line length.
For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the line length limit up to 99 characters, provided that comments and docstrings are still wrapped at 72 characters.
The Python standard library is conservative and requires limiting lines to 79 characters (and docstrings/comments to 72).

Rule 3: Whitespace
Avoid extraneous whitespace in the following situations:
- Immediately inside parentheses, brackets or braces. 
  Wrong: spam( ham[ 1 ], { eggs: 2 } )
  Correct: spam(ham[1], {eggs: 2})
- Between a trailing comma and a following close parenthesis.
  Wrong: bar = (0, )
  Correct: foo = (0,)
- Immediately before a comma, semicolon, or colon.
  Wrong: if x == 4 : print(x , y) ; x , y = y , x
  Correct: if x == 4: print(x, y); x, y = y, x
- Immediately before the open parenthesis that starts the argument list of a function call.
  Wrong: spam (1)
  Correct: spam(1)
- Immediately before the open parenthesis that starts an indexing or slicing.
  Wrong: dct ['key'] = lst [index]
  Correct: dct['key'] = lst[index]
- More than one space around an assignment (or other) operator to align it with another.
  Wrong:
  x             = 1
  y             = 2
  Correct:
  x = 1
  y = 2

Rule 4: Naming
Naming conventions are a central part of PEP 8. Function and variable names should use lowercase with words separated by underscores (e.g., my_function), while class names use CamelCase (e.g., MyClass).
Constants should be uppercase with underscores (e.g., MY_CONSTANT).
Module and package names should be short, lowercase, and use underscores for modules (e.g., my_module.py) and no underscores for packages (e.g., mypackage).
It is advised to avoid single-character variable names like l, O, or I due to their similarity to the digits 1 and 0.

Rule 5: Blank Lines 
Surround top-level function and class definitions with two blank lines.
Method definitions inside a class are surrounded by a single blank line.
Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).
Use blank lines in functions, sparingly, to indicate logical sections.